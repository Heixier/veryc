#!/bin/bash

CHECKS=250
SIZE=100
PROG="push_swap"

OPTSTR=":s:c:n:hv"
MEMTEST=false

while getopts "$OPTSTR" opt
	do
		case "$opt" in
			h)
				echo  -e "Usage: $0 [OPTION]...\nGenerates random numbers for push_swap\n\n\
OPTIONS:\n\n\
	-s 		specifies how many numbers to check (default: 100)
	-c		specifies how many times to check (default: 250)
	-n		specifies a different program name (default: "push_swap")
	-v		checks for memory leaks (warning: takes more time!)\n
Example: ./$0 -c 100 -v 250 -v"
				exit 0
				;;
			s)
				if [[ "$OPTARG" =~ ^[-+]?[0-9]+$ ]] && (( "$OPTARG" >= 0 ))
					then SIZE="$OPTARG"
				else
					echo -e "$0: invalid option -- '"$OPTARG"'"
					echo "Try '-h' for more information."
					exit 22
				fi
				;;
			c)
				if [[ "$OPTARG" =~ ^[-+]?[0-9]+$ ]] && (( "$OPTARG" >= 0 ))
					then CHECKS="$OPTARG"
				else
					echo -e "$0: invalid option -- '"$OPTARG"'"
					echo "Try '-h' for more information."
					exit 22
				fi
				;;
			v)
				MEMTEST=true
				;;
			n)
				PROG="$OPTARG"
				if [ -x $PROG ]
					then
						echo "Running '"$PROG"'"
					else
						echo "Error: could not find '"$PROG"'"
						exit 2
				fi
				;;
			?)
				echo -e "$0: invalid option -- '"$OPTARG"'"
				echo "Try '-h' for more information."
				exit 22
				;;
		esac
	done

if ! [ -x "$PROG" ]
	then
		echo -e "'"$PROG"' not found/not executable\n'-h' for more information."
		exit 2
fi

RESULT=() # Initialise RESULT as an array
tput sc
for i in $(seq 1 "$CHECKS");
do
	ARGS=$(shuf -i 0-2147483648 -n "$SIZE" | while read -r line; do echo "$((line * (1 - 2 * (RANDOM % 2))))"; done | tr '\n' ' ') # "random" because seed is fixed
	if $MEMTEST
		then
			echo -en "$(tput rc; tput el)"
			echo -en "Processing... $i/$CHECKS (note: valgrind can take a while)"
			out=$(valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes -s ./"$PROG" "$ARGS" 2>&1) # Redirect stderr to stdout
			if echo "$out" | grep -E "definitely lost|indirectly lost|possibly lost|ERROR SUMMARY: [^0]|Invalid" > /dev/null
				then
					echo -e "\n\e[1;91m$out\e[0m"
					exit 1
			fi
		else
			echo -en "\r\e[KProcessing... $i/$CHECKS"
			out=$(./"$PROG" "$ARGS")
    fi
	count=$(echo "$out" | grep -vc "==")
	RESULT+=("$count")
done

echo -en "$(tput rc; tput el)"

printf "%s\n" "${RESULT[@]}" | sort -n | \
awk -v size="$SIZE" -v checks="$CHECKS" 'NR==1 {min = $1} END \
{printf("\\e[1;92mTest complete!\\e[0m\\nSize: %d | Times tested: %d\\nMax: %d | Min: %d", size, checks, $1, min)}' | \
echo -e "$(cat)"
